/*
 ============================================================================
 Name        : Assignment1.c
 Author      : Daniel Webb
 Version     :
 Copyright   : Your copyright notice
 Description : Delegate shell commands via systemcall in child process
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include <semaphore.h>

int main(void) {

	/*
	 * Initialize Arguments
	 */
	char * shared_memory;
	key_t shared_memory_key;
	int shared_memory_id;
	char * shared_memory_addr;
	char * shared_memory_file = "/tmp/shared_memory";
	char * sem_rec = "RECEIVER";
	char * sem_proc = "PROCESSOR";

	sem_t * semaphore_rec_id = sem_get(sem_rec, 1, 0666 |IPC_CREAT);
	sem_t * semaphore_proc_id = sem_get(sem_proc, 1, 0666 | IPC_CREAT);

	while(1){

		sem_wait(semaphore_rec_id);

		if(( shared_memory_key = ftok(shared_memory_file, 'x')) == -1){
			perror("ftok");
			exit(1);
		}

		if((shared_memory_id = shmget(shared_memory_key, 1024, 0644 | IPC_CREAT)) == -1){
			perror("shmget");
			exit(1);
		}
		if((shared_memory_addr = (char *) shmat(shared_memory_id, 0, 0)) == -1){
			perror("shmat");
			exit(1);
		}

		printf("Reading: %s\n", shared_memory_addr);

		shmdt(shared_memory_addr);

		sem_post(semaphore_proc_id);

	}
}
